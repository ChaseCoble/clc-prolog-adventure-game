/*
  This is a little adventure game.  There are three
  entities: you, a treasure, and an ogre.  There are 
  six places: a valley, a path, a cliff, a fork, a maze, 
  and a mountaintop.  Your goal is to get the treasure
  without being killed first.
*/

/*
  First, text descriptions of all the places in 
  the game.
*/
description(valley,
  'You are in a pleasant valley, with a trail ahead.').
description(path,
  'You are on a path, with ravines on both sides.').
description(cliff,
  'You are teetering on the edge of a cliff.').
description(fork,
  'You are at a fork in the path.').
description(maze(_),
  'You are in a maze of twisty trails, all alike.').
description(mountaintop,
  'You are on the mountaintop.').
description(gateClosed,
	'You are at a wide and heavy gate. You see a lock that needs a key.').
description(gateOpened,
	'An opened gate \n').

heldDescription(key,
	'You have a shiny key').
heldDescription(empty,
	'Your hands are empty').
	


report :-
  at(you,X),
  description(X,Y),
  held(W),
  heldDescription(W,Z),
  write(Y), nl,
  write(Z), nl.


connect(valley,forward,path).
connect(path,right,cliff).
connect(path,left,cliff).
connect(path,forward,fork).
connect(fork,left,maze(0)).
connect(fork,right,gateClosed).
connect(gateClosed,left,fork).
connect(gateOpened,forward,mountaintop).
connect(maze(0),left,maze(1)).
connect(maze(0),right,maze(3)).
connect(maze(1),left,maze(0)).
connect(maze(1),right,maze(2)).
connect(maze(2),left,fork).
connect(maze(2),right,maze(0)).
connect(maze(3),left,maze(0)).
connect(maze(3),right,fork).


move(Dir) :-
  at(you,Loc),
  connect(Loc,Dir,Next),
  retract(at(you,Loc)),
  assert(at(you,Next)),
  report,
  !.

move(_) :-
  write('That is not a legal move.\n'),
  report.


forward :- move(forward).
left :- move(left).
right :- move(right).
holding:-
	held(X),
	heldDescription(X,Y),
	write(Y), nl.

drop:-
	held(key),
	at(you, Loc),
	retract(at(key,_)),
	assert(at(key,Loc)),
	write('You drop the key \n'),
	retract(held(key)),
	assert(held(empty)),
	report,
	!.
drop:-
	held(empty),
	write('You have nothing to drop \n'),
	report,
	!.
pickup:-
	at(key,Loc),
	at(you,Loc),
	held(empty),
	write('You pick up a shiny key \n'),
	retract(held(empty)),
	assert(held(key)),
	report,
	!.

pickup:-
	at(key,Loc),
	at(you,Loc),
	held(key),
	write('You already have the key! \n'),
	report,
	!.
pickup:-
	write('There is nothing to pickup \n'),
	report,
	!.

ogre :-
  at(ogre,Loc),
  at(you,Loc),
  write('An ogre sucks your brain out through\n'),
  write('your eye sockets, and you die.\n'),
  retract(at(you,Loc)),
  assert(at(you,done)),
  !.

ogre.


treasure :-
	at(treasure, Loc),
	at(you,Loc),
	held(key),
	write('Your key attracts lightning and you die \n'),
	retract(at(you,Loc)),
	assert(at(you,done)),
	!.
	
treasure :-
  at(treasure,Loc),
  at(you,Loc),
  held(empty),
  write('There is a treasure here.\n'),
  write('Congratulations, you win!\n'),
  retract(at(you,Loc)),
  assert(at(you,done)),
  !.
treasure.


cliff :-
  at(you,cliff),
  write('You fall off and die.\n'),
  retract(at(you,cliff)),
  assert(at(you,done)),
  !.
cliff.
gate :-
	at(you, Loc),
	at(gate,Loc),
	held(key),
	retract(at(you,gateClosed)),
	assert(at(you,gateOpened)),
	write('You are at the gate, it swings open after you use your key.\n'),
	write("With a rumbling explosion, the road behind you falls away \n , leaving nothing but a ravine. No turning back now. \n"),
	holding,
	!.
gate.
key :-
	at(you,Loc),
	at(key,Loc),
	held(empty),
	write('A shiny key glints on the ground\n'),
	!.
key.
main :- 
  at(you,done),
  write('Thanks for playing.\n'),
  !.
main :-
  write('\nNext move -- '),
  read(Move),
  call(Move),
  ogre,
  treasure,
  cliff,
  gate,
  key,
  main.


go :-
  retractall(at(_,_)),  % clean up from previous runs
  retractall(held(_)),
  assert(at(you,valley)),
  assert(held(empty)),
  assert(at(ogre,maze(2))),
  assert(at(treasure,mountaintop)),
  assert(at(key,maze(3))),
  assert(at(gate,gateClosed)),
  write('This is an adventure game. \n'),
  write('Legal moves are left, right, or forward.\n'),
  write('Legal actions are drop, pickup, and holding to check your hands \n'),
  write('End each move/action with a period.\n\n'),
  report,
  main.